#include <cstring>
#include "../HWDescription/Cbc.h"
#include "../HWDescription/Module.h"
#include "../HWDescription/BeBoard.h"
#include "../HWInterface/CbcInterface.h"
#include "../HWInterface/BeBoardInterface.h"
#include "../HWDescription/Definition.h"
#include "../HWInterface/RegManager.h"
#include "../Utils/argvparser.h"
#include "../System/SystemController.h"
#include "../HWInterface/GlibFWInterface.h"
#include "../HWInterface/GlibFpgaConfig.h"
#include <uhal/uhal.hpp>

using namespace Ph2_HwDescription;
using namespace Ph2_HwInterface;
using namespace Ph2_System;

using namespace CommandLineProcessing;


int main( int argc, char* argv[] )
{
	ArgvParser cmd;

	// init
	cmd.setIntroductoryDescription( "CMS Ph2_ACF  RUTGERS ONLY TEST 2" );
	// error codes
	cmd.addErrorCode( 0, "Success" );
	cmd.addErrorCode( 1, "Error" );
	// options
	cmd.setHelpOption( "h", "help", "Print this help page" );

	cmd.defineOption( "file", "Hw Description File . Default value: settings/HWDescription_MAPSA.xml", ArgvParser::OptionRequiresValue /*| ArgvParser::OptionRequired*/ );
	cmd.defineOptionAlternative( "file", "f" );

	cmd.defineOption( "output", "Output Directory . Default value: Results", ArgvParser::OptionRequiresValue /*| ArgvParser::OptionRequired*/ );
	cmd.defineOptionAlternative( "output", "o" );

	int result = cmd.parse( argc, argv );
	if ( result != ArgvParser::NoParserError )
	{
		std::cout << cmd.parseErrorDescription( result );
		exit( 1 );
	}

	// now query the parsing results
	std::string cHWFile = ( cmd.foundOption( "file" ) ) ? cmd.optionValue( "file" ) : "settings/HWDescription_MAPSA.xml";
	std::string cDirectory = ( cmd.foundOption( "output" ) ) ? cmd.optionValue( "output" ) : "Results/";


	SystemController mysyscontroller;
	mysyscontroller.InitializeHw( cHWFile );
	//  mysyscontroller.ConfigureHw(std::cout);
	BeBoard* pBoard = mysyscontroller.fBoardVector.at( 0 );
	std::cout << "\nExecuting POWER ON...";
	mysyscontroller.fBeBoardInterface->PowerOn(pBoard);
	std::cout << "\nFirmware version: "; 
	mysyscontroller.fBeBoardInterface->ReadVer(pBoard);

	mysyscontroller.fBeBoardInterface->HeaderInitMPA(pBoard,2);
	mysyscontroller.fBeBoardInterface->HeaderInit(pBoard);
	mysyscontroller.fBeBoardInterface->ReadTrig(pBoard,1);
	mysyscontroller.fBeBoardInterface->SequencerInit(pBoard);
	mysyscontroller.fBeBoardInterface->TestbeamInit(pBoard, 0, 0);
	mysyscontroller.fBeBoardInterface->StrobeSettings(pBoard, 0,0,0,0, 1);

	mysyscontroller.fBeBoardInterface->ReadData(pBoard, 1,1,0);

	mysyscontroller.fBeBoardInterface->VDDPSTon(pBoard);
	mysyscontroller.fBeBoardInterface->VDDPSToff(pBoard);
	mysyscontroller.fBeBoardInterface->DVDDon(pBoard);
	mysyscontroller.fBeBoardInterface->DVDDoff(pBoard);
	mysyscontroller.fBeBoardInterface->PVDDon(pBoard);
	mysyscontroller.fBeBoardInterface->PVDDoff(pBoard);
	mysyscontroller.fBeBoardInterface->VBIASon(pBoard);
	mysyscontroller.fBeBoardInterface->VBIASoff(pBoard);
	mysyscontroller.fBeBoardInterface->AVDDon(pBoard);


	//	uint32_t uVal = ReadVer();
		//	mysyscontroller.InitializeSettings( HWFile );
	
		//	mysyscontroller.ConfigureHw();

	return 0;
}
